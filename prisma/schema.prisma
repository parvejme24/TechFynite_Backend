generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  displayName   String
  email         String    @unique
  password      String
  photoUrl      String?
  designation   String?
  role          UserRole  @default(USER)
  phone         String?
  country       String?
  city          String?
  stateOrRegion String?
  postCode      String?
  balance       Float     @default(0.0)
  isVerified    Boolean?  @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  otpCode       String?
  otpExpiresAt  DateTime?
  refreshToken  String?

  blogLikes      BlogLike[]     @relation("UserLikes")
  blogs          Blog[]         @relation("BlogAuthor")
  notifications  Notification[] @relation("UserNotifications")
  orders         OrderInvoice[] @relation("UserOrders")
  purchases      Template[]     @relation("UserPurchases")
  reviews        BlogReview[]   @relation("UserReviews")
  contacts       Contact[]      @relation("UserContacts")
  contactReplies ContactReply[] @relation("UserContactReplies")

  @@index([email])
  @@map("users")
}

model TemplateCategory {
  id            String     @id @default(uuid())
  title         String
  imageUrl      String?
  templateCount Int        @default(0)
  slug          String     @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  templates     Template[] @relation("CategoryTemplates")

  @@index([slug])
  @@map("template_categories")
}

model Template {
  id               String           @id @default(uuid())
  title            String
  price            Float
  imageUrl         String?
  categoryId       String
  version          Float
  downloads        Int              @default(0)
  pages            Int              @default(1)
  views            Int              @default(0)
  totalPurchase    Int              @default(0)
  previewLink      String?
  sourceFiles      String[]
  shortDescription String
  description      String[]
  whatsIncluded    String[]
  keyFeatures      Json[]
  screenshots      String[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  orders           OrderInvoice[]   @relation("TemplateOrders")
  category         TemplateCategory @relation("CategoryTemplates", fields: [categoryId], references: [id])
  purchasedBy      User[]           @relation("UserPurchases")

  @@map("templates")
}

model BlogCategory {
  id        String   @id @default(uuid())
  title     String
  imageUrl  String?
  blogCount Int      @default(0)
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogs     Blog[]   @relation("CategoryBlogs")

  @@index([slug])
  @@map("blog_categories")
}

model Blog {
  id          String        @id @default(uuid())
  title       String
  categoryId  String
  imageUrl    String?
  description String[]
  likes       Int           @default(0)
  readingTime Float
  authorId    String
  content     BlogContent[] @relation("BlogContent")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  blogLikes   BlogLike[]    @relation("BlogLikes")
  reviews     BlogReview[]  @relation("BlogReviews")
  author      User          @relation("BlogAuthor", fields: [authorId], references: [id])
  category    BlogCategory  @relation("CategoryBlogs", fields: [categoryId], references: [id])

  @@map("blogs")
}

model BlogContent {
  id          String   @id @default(uuid())
  blogId      String
  blog        Blog     @relation("BlogContent", fields: [blogId], references: [id])
  heading     String
  description String[]
  imageUrl    String?
  createdAt   DateTime @default(now())
}

model BlogReview {
  id          String   @id @default(uuid())
  blogId      String
  userId      String
  fullName    String
  email       String
  photoUrl    String?
  commentText String
  reply       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blog        Blog     @relation("BlogReviews", fields: [blogId], references: [id])
  user        User     @relation("UserReviews", fields: [userId], references: [id])

  @@map("blog_reviews")
}

model BlogLike {
  id        String   @id @default(uuid())
  blogId    String
  userId    String
  createdAt DateTime @default(now())
  blog      Blog     @relation("BlogLikes", fields: [blogId], references: [id])
  user      User     @relation("UserLikes", fields: [userId], references: [id])

  @@unique([blogId, userId])
  @@map("blog_likes")
}

model OrderInvoice {
  id                String         @id @default(uuid())
  orderId           String         @unique
  userId            String
  templateId        String
  templateName      String
  templateThumbnail String?
  templatePrice     Float
  totalPrice        Float
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus  @default(PENDING)
  transactionId     String?
  status            OrderStatus    @default(PENDING)
  isDelivered       Boolean        @default(false)
  deliveryMethod    DeliveryMethod
  deliveryUrl       String?
  invoiceNumber     String         @unique
  invoiceDate       DateTime
  userEmail         String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  template          Template       @relation("TemplateOrders", fields: [templateId], references: [id])
  user              User           @relation("UserOrders", fields: [userId], references: [id])

  @@index([orderId, invoiceNumber])
  @@map("order_invoices")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation("UserNotifications", fields: [userId], references: [id])

  @@index([userId])
  @@map("notifications")
}

model Newsletter {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("newsletters")
}

model Contact {
  id             String         @id @default(uuid())
  projectDetails String
  budget         String
  fullName       String
  email          String
  companyName    String
  serviceRequred String
  status         ContactStatus  @default(PENDING)
  userId         String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User?          @relation("UserContacts", fields: [userId], references: [id])
  replies        ContactReply[] @relation("ContactReplies")

  @@map("contacts")
}

model ContactReply {
  id        String   @id @default(uuid())
  subject   String
  message   String
  contactId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contact Contact @relation("ContactReplies", fields: [contactId], references: [id], onDelete: Cascade)
  user    User    @relation("UserContactReplies", fields: [userId], references: [id])

  @@map("contact_replies")
}

model Pricing {
  id          String   @id @default(cuid())
  title       String
  price       Int
  license     String
  recommended Boolean  @default(false)
  duration    Duration
  features    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Duration {
  MONTHLY
  YEARLY
  HALFYEARLY
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

enum DeliveryMethod {
  DOWNLOAD
  EMAIL
}

enum NotificationType {
  PAYMENT_CONFIRMED
  TEMPLATE_DELIVERED
  BLOG_COMMENT
  ACCOUNT_UPDATE
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

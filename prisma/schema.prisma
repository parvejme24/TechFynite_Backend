generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String            @id @default(uuid())
  fullName                String
  email                   String            @unique
  password                String?
  role                    UserRole          @default(USER)
  isBanned                Boolean           @default(false)
  isTrashed               Boolean           @default(false)
  isDeletedPermanently    Boolean           @default(false)
  otpCode                 String?
  otpPurpose              OtpPurpose?
  otpExpiresAt            DateTime?
  otpVerified             Boolean           @default(false)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  isLoggedIn              Boolean           @default(false)
  lastLoginAt             DateTime?
  nextAuthExpiresAt       DateTime?
  nextAuthSecret          String?
  provider                String?
  providerId              String?
  profile                 UserProfile?
  blogLikes               BlogLike[]        @relation("UserLikes")
  adminReplies            BlogReviewReply[] @relation("AdminReplies")
  blogReviews             BlogReview[]      @relation("UserReviews")
  blogs                   Blog[]            @relation("BlogAuthor")
  contactReplies          ContactReply[]    @relation("UserContactReplies")
  contacts                Contact[]         @relation("UserContacts")
  licenses                License[]
  newsletterSubscriptions Newsletter[]      @relation("UserNewsletterSubscriptions")
  orders                  OrderInvoice[]
  purchasedTemplates      Template[]        @relation("UserPurchases")

  @@index([email])
  @@index([role])
  @@index([provider])
  @@index([isLoggedIn])
  @@map("users")
}

model UserProfile {
  id            String   @id @default(uuid())
  userId        String   @unique
  avatarUrl     String?
  coverImageUrl String?
  designation   String?
  phone         String?
  country       String?
  city          String?
  stateOrRegion String?
  postCode      String?
  balance       Float    @default(0.0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TemplateCategory {
  id            String     @id @default(uuid())
  title         String
  slug          String?    @unique
  image         String?
  templateCount Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  templates     Template[] @relation("CategoryTemplates")

  @@map("template_categories")
}

model Template {
  id                    String           @id @default(uuid())
  title                 String
  price                 Float
  lemonsqueezyProductId String?
  lemonsqueezyVariantId String?
  lemonsqueezyPermalink String?
  imageUrl              String?
  screenshots           String[]
  previewLink           String?
  sourceFiles           String[]
  shortDescription      String
  description           String[]
  whatsIncluded         String[]
  keyFeatures           Json[]
  version               Float
  pages                 Int              @default(1)
  downloads             Int              @default(0)
  totalPurchase         Int              @default(0)
  categoryId            String
  categoryName          String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  checkoutUrl           String?
  
  licenses              License[]        @relation("TemplateLicenses")
  links                 Link[]           @relation("TemplateLinks")
  orders                OrderInvoice[]   @relation("TemplateOrders")
  purchasedBy           User[]           @relation("UserPurchases")

  category              TemplateCategory @relation("CategoryTemplates", fields: [categoryId], references: [id])

  @@index([categoryId])
  @@index([createdAt])
  @@map("templates")
}

model Link {
  id         String   @id @default(uuid())
  templateId String
  linkTitle1 String
  linkUrl1   String
  linkTitle2 String
  linkUrl2   String
  linkTitle3 String
  linkUrl3   String
  template   Template @relation("TemplateLinks", fields: [templateId], references: [id], onDelete: Cascade)

  @@map("links")
}

model OrderInvoice {
  id                    String      @id @default(uuid())
  userId                String?
  templateId            String
  lemonsqueezyOrderId   String      @unique
  lemonsqueezyInvoiceId String?
  status                OrderStatus @default(PENDING)
  totalAmount           Float
  currency              String      @default("USD")
  licenseType           LicenseType
  paymentMethod         String?
  customerEmail         String
  customerName          String?
  billingAddress        Json?
  downloadLinks         String[]
  expiresAt             DateTime?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  licenses              License[]
  template              Template    @relation("TemplateOrders", fields: [templateId], references: [id], onDelete: Cascade)
  user                  User?       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([templateId])
  @@index([lemonsqueezyOrderId])
  @@index([status])
  @@index([createdAt])
  @@map("order_invoices")
}

model License {
  id                  String        @id @default(uuid())
  orderId             String?
  templateId          String
  userId              String?
  licenseType         LicenseType
  licenseKey          String        @unique
  lemonsqueezyOrderId String
  isActive            Boolean       @default(true)
  maxUsage            Int?
  usedCount           Int           @default(0)
  expiresAt           DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  activationLimit     Int?
  order               OrderInvoice? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  template            Template      @relation("TemplateLicenses", fields: [templateId], references: [id], onDelete: Cascade)
  user                User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([templateId])
  @@index([licenseKey])
  @@index([isActive])
  @@index([lemonsqueezyOrderId])
  @@map("licenses")
}

model BlogCategory {
  id        String   @id @default(uuid())
  title     String
  imageUrl  String?
  blogCount Int      @default(0)
  slug      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogs     Blog[]   @relation("CategoryBlogs")

  @@index([slug])
  @@index([createdAt])
  @@map("blog_categories")
}

model Blog {
  id          String       @id @default(uuid())
  title       String
  categoryId  String
  imageUrl    String?
  description Json
  likes       Int          @default(0)
  readingTime Float
  authorId    String
  slug        String?      @unique
  isPublished Boolean      @default(true)
  viewCount   Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  content     Json?
  blogLikes   BlogLike[]   @relation("BlogLikes")
  reviews     BlogReview[] @relation("BlogReviews")
  author      User         @relation("BlogAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  category    BlogCategory @relation("CategoryBlogs", fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([authorId])
  @@index([createdAt])
  @@index([isPublished])
  @@index([slug])
  @@map("blogs")
}

model BlogReview {
  id          String            @id @default(uuid())
  blogId      String
  userId      String?
  fullName    String
  email       String
  photoUrl    String?
  commentText String
  rating      Int?              @default(5)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  replies     BlogReviewReply[] @relation("ReviewReplies")
  blog        Blog              @relation("BlogReviews", fields: [blogId], references: [id], onDelete: Cascade)
  user        User?             @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)

  @@index([blogId])
  @@index([userId])
  @@index([createdAt])
  @@map("blog_reviews")
}

model BlogReviewReply {
  id        String     @id @default(uuid())
  reviewId  String
  adminId   String
  replyText String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  admin     User       @relation("AdminReplies", fields: [adminId], references: [id], onDelete: Cascade)
  review    BlogReview @relation("ReviewReplies", fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([adminId])
  @@index([createdAt])
  @@map("blog_review_replies")
}

model BlogLike {
  id        String   @id @default(uuid())
  blogId    String
  userId    String
  createdAt DateTime @default(now())
  blog      Blog     @relation("BlogLikes", fields: [blogId], references: [id], onDelete: Cascade)
  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([blogId, userId])
  @@index([blogId])
  @@index([userId])
  @@map("blog_likes")
}

model Contact {
  id              String         @id @default(uuid())
  projectDetails  String
  budget          String
  fullName        String
  email           String
  companyName     String
  serviceRequired String         @map("serviceRequred")
  userId          String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  replies         ContactReply[] @relation("ContactReplies")
  user            User?          @relation("UserContacts", fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@map("contacts")
}

model ContactReply {
  id        String   @id @default(uuid())
  subject   String
  message   String
  contactId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact  @relation("ContactReplies", fields: [contactId], references: [id], onDelete: Cascade)
  user      User     @relation("UserContactReplies", fields: [userId], references: [id])

  @@index([contactId])
  @@index([userId])
  @@map("contact_replies")
}

model Newsletter {
  id        String   @id @default(uuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation("UserNewsletterSubscriptions", fields: [userId], references: [id])

  @@index([email])
  @@index([isActive])
  @@index([userId])
  @@map("newsletters")
}

enum UserRole {
  ADMIN
  USER
}

enum OtpPurpose {
  REGISTRATION
  PASSWORD_RESET
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum LicenseType {
  SINGLE
  EXTENDED
}
